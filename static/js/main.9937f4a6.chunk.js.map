{"version":3,"sources":["Table/Table.tsx","AddForm/AddForm.tsx","App.tsx","api/api.ts","index.tsx"],"names":["columns","field","headerName","width","editable","type","description","sortable","valueGetter","params","row","category","map","cat","join","Table","props","books","React","nbRows","setNbRows","rows","style","height","Button","variant","onClick","x","Math","max","min","slice","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","AddForm","Box","component","sx","m","noValidate","autoComplete","TextField","id","label","defaultValue","InputProps","readOnly","required","InputLabelProps","shrink","helperText","App","useState","setBooks","loadData","a","fetch","then","response","ok","Error","status","statusText","json","booksList","useEffect","className","to","path","element","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9937f4a6.chunk.js","sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\n\nconst columns: GridColDef[] = [\n  { field: 'id', headerName: 'ID', width: 90 },\n  {\n    field: 'title',\n    headerName: 'Title',\n    width: 150,\n    editable: false,\n  },\n  {\n    field: 'author',\n    headerName: 'Author',\n    width: 150,\n    editable: false,\n  },\n  {\n    field: 'ISBN',\n    headerName: 'ISBN',\n    type: 'number',\n    width: 160,\n    editable: false,\n  },\n  {\n    field: 'category',\n    headerName: 'Category',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 180,\n    valueGetter: (params: GridValueGetterParams) => params.row.category.map((cat: string) => `${cat || ''}`).join('/'),\n  },\n];\n\ntype Props = {\n  books: Book[];\n};\n\nexport const Table: React.FC<Props> = (props) => {\n  const { books } = props;\n  const [nbRows, setNbRows] = React.useState(15);\n  const removeRow = () => setNbRows((x) => Math.max(0, x - 1));\n  const addRow = () => setNbRows((x) => Math.min(100, x + 1));\n\n  const rows = books;\n\n  return (\n    <div style={{ height: 400, width: '60%' }}>\n      <h1>Tabble of my books</h1>\n      <Button variant=\"outlined\" onClick={removeRow}>\n        Remove a row\n      </Button>\n      <Button variant=\"outlined\" onClick={addRow}>\n        Add a row\n      </Button>\n      <DataGrid\n        rows={rows.slice(0, nbRows)}\n        columns={columns}\n        pageSize={15}\n        rowsPerPageOptions={[15]}\n        checkboxSelection\n        disableSelectionOnClick\n      />\n    </div>\n  );\n};\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n// import { useEffect, useState } from 'react';\n// import { requestBooks } from '../api/api';\n\ntype Props = {\n  data: Book[];\n};\n\nexport const AddForm: React.FC<Props> = () => {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <h1>Add a Book</h1>\n      <div>\n        <TextField\n          id=\"id\"\n          label=\"ID\"\n          defaultValue=\"0\"\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          required\n          id=\"title\"\n          label=\"Title\"\n          defaultValue=\"Title\"\n        />\n        <TextField\n          required\n          id=\"author\"\n          label=\"Author\"\n          defaultValue=\"Author\"\n        />\n        <TextField\n          required\n          id=\"category\"\n          label=\"Category\"\n          defaultValue=\"Category\"\n        />\n        <TextField\n          required\n          id=\"ISBN\"\n          label=\"ISBN\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          helperText=\"ISBN code must contain 13 numbers\"\n        />\n        <TextField\n          id=\"outlined-helperText\"\n          label=\"Helper text\"\n          defaultValue=\"Default Value\"\n        />\n      </div>\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { requestBooks } from './api/api';\nimport './App.scss';\nimport { Table } from './Table';\nimport { AddForm } from './AddForm';\n\nexport const App: React.FC = () => {\n  const [books, setBooks] = useState<Book[]>([]);\n\n  const loadData = async () => {\n    const booksList = await requestBooks();\n\n    setBooks(booksList);\n  };\n\n  // const max = (Math.max(...books.map(book => book.id)));\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <nav>\n        {/* <Link to=\"/\">Home</Link> */}\n        <Link to=\"/\">Dashboard</Link>\n        <Link to=\"/add\">Add Book</Link>\n      </nav>\n      <Routes>\n        {/* <Route path=\"/\" element={<h1>Home page</h1>} /> */}\n        <Route path=\"/\" element={<Table books={books} />} />\n        <Route path=\"add\" element={<AddForm data={books} />} />\n        <Route\n          path=\"*\"\n          element={(\n            <p>\n              Page not found\n            </p>\n          )}\n        />\n      </Routes>\n    </div>\n  );\n};\n","const BASE_URL = 'https://my-json-server.typicode.com/Nadiyahr/db-json/books';\n\nexport const requestBooks = () => {\n  return fetch(BASE_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}